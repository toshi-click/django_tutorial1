# docker-composeバージョンの宣言
# https://docs.docker.com/compose/compose-file/
version: '3.7'
x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file

services:
  proxy:
    restart: always
    container_name: proxy
    build: ./docker/proxy
    privileged: true
    environment:
      ENABLE_IPV6: "false"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /app/certs:/etc/nginx/certs
      - htpasswd:/etc/nginx/htpasswd
      - vhost:/etc/nginx/vhost.d:ro
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    logging: *default-logging

  # Let's Encrypt取得・更新用のコンテナ
#  letsencrypt-nginx:
#    container_name: letsencrypt-nginx
#    restart: always
#    image: jrcs/letsencrypt-nginx-proxy-companion
#    privileged: true
#    depends_on:
#      - "proxy"
#    volumes:
#      - /app/certs:/etc/nginx/certs
#      - htpasswd:/etc/nginx/htpasswd
#      - vhost:/etc/nginx/vhost.d
#      - html:/usr/share/nginx/html
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    logging: *default-logging

  postfix:
    container_name: postfix
    restart: always
    image:
      context: toshiclick/postfix:latest
      args:
        hostname: vm.dev.test
        domain_name: vm.dev.test
    ports:
      - "25"
      - "110"
    logging: *default-logging

  django_postgres:
    restart: always
    build: ./docker/postgresql
    container_name: django_postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    volumes:
      - django_postgres_data:/var/lib/postgresql/data
    #      - ./docker/postgresql/postgresql.conf:/etc/postgresql.conf
    #      - ./docker/01_create_db.sql:/docker-entrypoint-initdb.d/01_create_db.sql
    #      - ./docker/02_django_db.sql:/docker-entrypoint-initdb.d/02_django_db.sql
    ports:
      - "5432"
    logging: *default-logging

  django_web:
    restart: always
    build: ./docker/django
    container_name: django_web
    environment:
      VIRTUAL_HOST: django.vm.dev.test
      VIRTUAL_PORT: 80
    # --max-requests 1は開発中にファイルを変更しても反映されないのでさせるために付与。
    # 付けない場合はファイル更新を通知するために下記をする必要がある
    # docker exec -it django_web pgrep gunicorn
    # docker exec -it django_web kill -HUP [↑で確認した番号]
    command: bash -c "sleep 5; gunicorn config.wsgi --workers 2 --bind 0.0.0.0:80 --max-requests 1"
    volumes:
      - ./django:/usr/src/app
    ports:
      - "80"
    logging: *default-logging

  laravel_php:
    restart: always
    build: ./docker/php-fpm
    container_name: "laravel_php"
    environment:
      VIRTUAL_HOST: laravel.vm.dev.test
      VIRTUAL_PORT: 80
      VIRTUAL_PROTO: fastcgi
    volumes:
      - ./laravel:/src
    ports:
      - "80"
    logging: *default-logging

  laravel_postgres:
    restart: always
    build: ./docker/postgresql
    container_name: "laravel_postgres"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    volumes:
      - laravel_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432"
    logging: *default-logging

  laravel_redis:
    restart: always
    image: redis:alpine
    container_name: "laravel_redis"
    ports:
      - "6379"
    logging: *default-logging

  rails_postgres:
    restart: always
    build: ./docker/postgresql
    container_name: rails_postgres
    volumes:
      - rails_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    ports:
      - "5432"
    logging: *default-logging

  rails_web:
    restart: always
    build: ./docker/rails
    container_name: rails_web
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 80 -b '0.0.0.0'"
    environment:
      VIRTUAL_HOST: rails.vm.dev.test
      RAILS_ENV: development
    volumes:
      - ./rails:/app:cached
      - bundle_install:/usr/local/bundle
    ports:
      - "80"
    depends_on:
      - rails_postgres
    logging: *default-logging

  radius:
    restart: always
    build: ./docker/free_radius
    container_name: radius
    volumes:
      - /var/log/freeradius:/var/log/freeradius
    ports:
      - "1812:1812"
      - "1813:1813"
      - "1812:1812/udp"
      - "1813:1813/udp"
    logging:
      driver: "json-file" # defaults if not specified
      options:
        max-size: "10m"
        max-file: "3"

#  awx_postgres:
#    restart: always
#    build: ./docker/postgresql
#    container_name: awx_postgres
#    command: 'postgres -c config_file="/etc/postgresql.conf"'
#    environment:
#      POSTGRES_USER: awx
#      POSTGRES_PASSWORD: awxpass
#      POSTGRES_DB: awx
#    volumes:
#      - awx_db:/var/lib/postgresql/data
#      - ./docker/postgresql/postgresql.conf:/etc/postgresql.conf
#    ports:
#      - '5432'
#    logging: *default-logging
#
#  awx_rabbitmq:
#    restart: always
#    image: ansible/awx_rabbitmq
#    container_name: awx_rabbitmq
#    environment:
#      RABBITMQ_DEFAULT_VHOST: "awx"
#      RABBITMQ_DEFAULT_USER: "guest"
#      RABBITMQ_DEFAULT_PASS: "guest"
#      RABBITMQ_ERLANG_COOKIE: "cookiemonster"
#    ports:
#      - '5672'
#    logging: *default-logging
#
#  awx_memcached:
#    restart: always
#    image: "memcached:alpine"
#    container_name: awx_memcached
#    ports:
#      - '11211'
#    logging: *default-logging
#
#  awx_web:
#    restart: always
#    image: "ansible/awx_web:latest"
#    container_name: awx_web
#    ports:
#      - "80"
#      - "8052"
#    volumes:
#      - "./docker/awx/SECRET_KEY:/etc/tower/SECRET_KEY"
#      - "./docker/awx/environment.sh:/etc/tower/conf.d/environment.sh"
#      - "./docker/awx/credentials.py:/etc/tower/conf.d/credentials.py"
#      - "./docker/awx/awx_projects:/var/lib/awx/projects:rw"
#    hostname: awxweb
#    user: root
#    logging: *default-logging
#
#  awx_task:
#    restart: always
#    image: "ansible/awx_task:latest"
#    container_name: awx_task
#    hostname: awx
#    user: root
#    volumes:
#      - "./docker/awx/SECRET_KEY:/etc/tower/SECRET_KEY"
#      - "./docker/awx/environment.sh:/etc/tower/conf.d/environment.sh"
#      - "./docker/awx/credentials.py:/etc/tower/conf.d/credentials.py"
#      - "./docker/awx/awx_projects:/var/lib/awx/projects:rw"
#    environment:
#      SECRET_KEY: aabbcc
#      DATABASE_USER: awx
#      DATABASE_PASSWORD: awxpass
#      DATABASE_NAME: awx
#      DATABASE_PORT: 5432
#      DATABASE_HOST: awx_postgres
#      RABBITMQ_USER: guest
#      RABBITMQ_PASSWORD: guest
#      RABBITMQ_HOST: awx_rabbitmq
#      RABBITMQ_PORT: 5672
#      RABBITMQ_VHOST: awx
#      MEMCACHED_HOST: awx_memcached
#      MEMCACHED_PORT: 11211
#    logging: *default-logging
volumes:
  htpasswd:
  vhost:
  html:
  django_postgres_data:
  laravel_postgres_data:
  rails_postgres_data:
  bundle_install:
#  awx_db:
#  awx_projects:

networks:
  docker_bridge:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.22.0.0/16"
